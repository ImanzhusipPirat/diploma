require("dotenv").config(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º .env

const mongoose = require("mongoose");

const mongoUrl = process.env.MONGO_URL; // –ë–µ—Ä–µ–º URL –∏–∑ .env

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω"))
  .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err));

// –°—Ö–µ–º–∞ –¥–ª—è –∏–≤–µ–Ω—Ç–æ–≤
const eventSchema = new mongoose.Schema({
  title: String,
  date: Date,
  description: String
});

// –ú–æ–¥–µ–ª—å
const Event = mongoose.model("Event", eventSchema);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
const createEvent = async () => {
  const newEvent = new Event({
    title: "Hackathon",
    date: new Date("2025-03-10"),
    description: "–ö—Ä—É—Ç–æ–π IT-—Ö–∞–∫–∞—Ç–æ–Ω!"
  });

  await newEvent.save();
  console.log("üéâ –ò–≤–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!");
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
createEvent();
